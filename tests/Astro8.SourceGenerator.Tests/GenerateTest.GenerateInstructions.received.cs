//HintName: CpuInstructions.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Astro8.Instructions;

namespace Astro8.Devices;

/// <summary>
/// Default instruction set for the Astro-8 CPU.
/// </summary>
public partial class Cpu<THandler>
{
    private void Step(StepContext context)
    {
        switch (context.Instruction.MicroInstructionId)
        {
        
            case 0:
                FETCH(context);
                break;
        
            case 1:
                AIN(context);
                break;
        
            case 2:
                BIN(context);
                break;
        
            case 3:
                CIN(context);
                break;
        
            case 4:
                LDIA(context);
                break;
        
            case 5:
                LDIB(context);
                break;
        
            case 6:
                RDEXP(context);
                break;
        
            case 7:
                WREXP(context);
                break;
        
            case 8:
                STA(context);
                break;
        
            case 9:
                STC(context);
                break;
        
            case 10:
                ADD(context);
                break;
        
            case 11:
                SUB(context);
                break;
        
            case 12:
                MULT(context);
                break;
        
            case 13:
                DIV(context);
                break;
        
            case 14:
                JMP(context);
                break;
        
            case 15:
                JMPZ(context);
                break;
        
            case 16:
                JMPC(context);
                break;
        
            case 17:
                LDAIN(context);
                break;
        
            case 18:
                STAOUT(context);
                break;
        
            case 19:
                LDLGE(context);
                break;
        
            case 20:
                STLGE(context);
                break;
        
            case 21:
                SWP(context);
                break;
        
            case 22:
                SWPC(context);
                break;
        
            case 23:
                HLT(context);
                break;
        
            case 24:
                OUT(context);
                break;
        
        }
    }

    private void FETCH(StepContext context)
    {
    }

    private void AIN(StepContext context)
    {
        // Step 2
        {
            // IR
            _bus = context.Instruction.Data;
            // AW
            _memoryIndex = _bus;
        }
        // Step 3
        {
            // RM
            _bus = context.Memory[_memoryIndex];
            // WA
            A = _bus;
        }
    }

    private void BIN(StepContext context)
    {
        // Step 2
        {
            // IR
            _bus = context.Instruction.Data;
            // AW
            _memoryIndex = _bus;
        }
        // Step 3
        {
            // RM
            _bus = context.Memory[_memoryIndex];
            // WB
            B = _bus;
        }
    }

    private void CIN(StepContext context)
    {
        // Step 2
        {
            // IR
            _bus = context.Instruction.Data;
            // AW
            _memoryIndex = _bus;
        }
        // Step 3
        {
            // RM
            _bus = context.Memory[_memoryIndex];
            // WC
            C = _bus;
        }
    }

    private void LDIA(StepContext context)
    {
        // Step 2
        {
            // IR
            _bus = context.Instruction.Data;
            // WA
            A = _bus;
        }
    }

    private void LDIB(StepContext context)
    {
        // Step 2
        {
            // IR
            _bus = context.Instruction.Data;
            // WB
            B = _bus;
        }
    }

    private void RDEXP(StepContext context)
    {
        // Step 2
        {
            // RE
            _bus = ExpansionPort;
            // WA
            A = _bus;
        }
    }

    private void WREXP(StepContext context)
    {
        // Step 2
        {
            // RA
            _bus = A;
            // WE
            ExpansionPort = _bus;
        }
    }

    private void STA(StepContext context)
    {
        // Step 2
        {
            // IR
            _bus = context.Instruction.Data;
            // AW
            _memoryIndex = _bus;
        }
        // Step 3
        {
            // RA
            _bus = A;
            // WM
            context.Set(_memoryIndex, _bus);
        }
    }

    private void STC(StepContext context)
    {
        // Step 2
        {
            // IR
            _bus = context.Instruction.Data;
            // AW
            _memoryIndex = _bus;
        }
        // Step 3
        {
            // RC
            _bus = C;
            // WM
            context.Set(_memoryIndex, _bus);
        }
    }

    private void ADD(StepContext context)
    {
        // Step 2
        {
            // ADD
            _bus = A + B;
            _flagA = _bus == 0;

            if (_bus >= 65535)
            {
                _bus -= 65535;
                _flagB = true;
            }
            else
            {
                _flagB = false;
            }
            // WA
            A = _bus;
        }
    }

    private void SUB(StepContext context)
    {
        // Step 2
        {
            // SU
            _bus = A - B;
            _flagA = _bus == 0;

            if (_bus < 0)
            {
                _bus = 65535 + _bus;
                _flagB = false;
            }
            else
            {
                _flagB = true;
            }
            // WA
            A = _bus;
        }
    }

    private void MULT(StepContext context)
    {
        // Step 2
        {
            // MU
            _bus = A * B;
            _flagA = _bus == 0;

            if (_bus >= 65535)
            {
                _bus -= 65535;
                _flagB = true;
            }
            else
            {
                _flagB = false;
            }
            // WA
            A = _bus;
        }
    }

    private void DIV(StepContext context)
    {
        // Step 2
        {
            // DI
            if (B != 0)
            {
                if (A / B == 0)
                {
                    _flagA = true;
                }

                _bus = A / B;
                _flagA = _bus == 0;
            }
            else
            {
                _flagA = false;
                _bus = 0;
            }

            if (_bus >= 65535)
            {
                _bus -= 65535;
                _flagB = true;
            }
            else
            {
                _flagB = false;
            }
            // WA
            A = _bus;
        }
    }

    private void JMP(StepContext context)
    {
        // Step 2
        {
            // IR
            _bus = context.Instruction.Data;
            // J
            _programCounter = _bus;
        }
    }

    private void JMPZ(StepContext context)
    {
        // Step 2
        if (_flagA == false && _flagB == false)
        {
            // EI
            return;
        }
        // Step 2
        if (_flagA == false && _flagB == true)
        {
            // EI
            return;
        }
        // Step 2
        if (_flagA == true && _flagB == false)
        {
            // IR
            _bus = context.Instruction.Data;
            // J
            _programCounter = _bus;
        }
        // Step 2
        if (_flagA == true && _flagB == true)
        {
            // IR
            _bus = context.Instruction.Data;
            // J
            _programCounter = _bus;
        }
    }

    private void JMPC(StepContext context)
    {
        // Step 2
        if (_flagA == false && _flagB == false)
        {
            // EI
            return;
        }
        // Step 2
        if (_flagA == false && _flagB == true)
        {
            // IR
            _bus = context.Instruction.Data;
            // J
            _programCounter = _bus;
        }
        // Step 2
        if (_flagA == true && _flagB == false)
        {
            // EI
            return;
        }
        // Step 2
        if (_flagA == true && _flagB == true)
        {
            // IR
            _bus = context.Instruction.Data;
            // J
            _programCounter = _bus;
        }
    }

    private void LDAIN(StepContext context)
    {
        // Step 2
        {
            // RA
            _bus = A;
            // AW
            _memoryIndex = _bus;
        }
        // Step 3
        {
            // RM
            _bus = context.Memory[_memoryIndex];
            // WA
            A = _bus;
        }
    }

    private void STAOUT(StepContext context)
    {
        // Step 2
        {
            // RA
            _bus = A;
            // AW
            _memoryIndex = _bus;
        }
        // Step 3
        {
            // RB
            _bus = B;
            // WM
            context.Set(_memoryIndex, _bus);
        }
    }

    private void LDLGE(StepContext context)
    {
        // Step 2
        {
            // CR
            _bus = _programCounter;
            // AW
            _memoryIndex = _bus;
        }
        // Step 3
        {
            // RM
            _bus = context.Memory[_memoryIndex];
            // AW
            _memoryIndex = _bus;
        }
        // Step 4
        {
            // RM
            _bus = context.Memory[_memoryIndex];
            // WA
            A = _bus;
            // CE
            _programCounter += 1;
        }
    }

    private void STLGE(StepContext context)
    {
        // Step 2
        {
            // CR
            _bus = _programCounter;
            // AW
            _memoryIndex = _bus;
        }
        // Step 3
        {
            // RM
            _bus = context.Memory[_memoryIndex];
            // AW
            _memoryIndex = _bus;
        }
        // Step 4
        {
            // RA
            _bus = A;
            // WM
            context.Set(_memoryIndex, _bus);
            // CE
            _programCounter += 1;
        }
    }

    private void SWP(StepContext context)
    {
        // Step 2
        {
            // RA
            _bus = A;
            // WC
            C = _bus;
        }
        // Step 3
        {
            // RB
            _bus = B;
            // WA
            A = _bus;
        }
        // Step 4
        {
            // RC
            _bus = C;
            // WB
            B = _bus;
        }
    }

    private void SWPC(StepContext context)
    {
        // Step 2
        {
            // RA
            _bus = A;
            // WB
            B = _bus;
        }
        // Step 3
        {
            // RC
            _bus = C;
            // WA
            A = _bus;
        }
        // Step 4
        {
            // RB
            _bus = B;
            // WC
            C = _bus;
        }
    }

    private void HLT(StepContext context)
    {
        // Step 2
        {
            // ST
            _halt = true;
        }
    }

    private void OUT(StepContext context)
    {
        // Step 2
        {
            // RA
            _bus = A;
        }
    }

}
