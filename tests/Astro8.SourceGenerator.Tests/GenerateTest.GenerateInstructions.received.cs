//HintName: CpuInstructions.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Astro8.Instructions;

namespace Astro8.Devices;

/// <summary>
/// Default instruction set for the Astro-8 CPU.
/// </summary>
public partial class Cpu<THandler>
{
    private void Step(ref StepContext context)
    {
        switch (context.Instruction.Id)
        {
        
            case 0:
                FETCH(ref context);
                break;
        
            case 1:
                AIN(ref context);
                break;
        
            case 2:
                BIN(ref context);
                break;
        
            case 3:
                CIN(ref context);
                break;
        
            case 4:
                LDIA(ref context);
                break;
        
            case 5:
                LDIB(ref context);
                break;
        
            case 6:
                RDEXP(ref context);
                break;
        
            case 7:
                WREXP(ref context);
                break;
        
            case 8:
                STA(ref context);
                break;
        
            case 9:
                STC(ref context);
                break;
        
            case 10:
                ADD(ref context);
                break;
        
            case 11:
                SUB(ref context);
                break;
        
            case 12:
                MULT(ref context);
                break;
        
            case 13:
                DIV(ref context);
                break;
        
            case 14:
                JMP(ref context);
                break;
        
            case 15:
                JMPZ(ref context);
                break;
        
            case 16:
                JMPC(ref context);
                break;
        
            case 17:
                LDAIN(ref context);
                break;
        
            case 18:
                STAOUT(ref context);
                break;
        
            case 19:
                LDLGE(ref context);
                break;
        
            case 20:
                STLGE(ref context);
                break;
        
            case 21:
                SWP(ref context);
                break;
        
            case 22:
                SWPC(ref context);
                break;
        
            case 23:
                HLT(ref context);
                break;
        
            case 24:
                OUT(ref context);
                break;
        
        }
    }

    private void FETCH(ref StepContext context)
    {
    }

    private void AIN(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.Instruction.Data;
            // AW
            _memoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(_memoryIndex);
            // WA
            context.A = context.Bus;
        }
    }

    private void BIN(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.Instruction.Data;
            // AW
            _memoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(_memoryIndex);
            // WB
            context.B = context.Bus;
        }
    }

    private void CIN(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.Instruction.Data;
            // AW
            _memoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(_memoryIndex);
            // WC
            context.C = context.Bus;
        }
    }

    private void LDIA(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.Instruction.Data;
            // WA
            context.A = context.Bus;
        }
    }

    private void LDIB(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.Instruction.Data;
            // WB
            context.B = context.Bus;
        }
    }

    private void RDEXP(ref StepContext context)
    {
        // Step 2
        {
            // RE
            context.Bus = context.ExpansionPort;
            // WA
            context.A = context.Bus;
        }
    }

    private void WREXP(ref StepContext context)
    {
        // Step 2
        {
            // RA
            context.Bus = context.A;
            // WE
            context.ExpansionPort = context.Bus;
        }
    }

    private void STA(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.Instruction.Data;
            // AW
            _memoryIndex = context.Bus;
        }
        // Step 3
        {
            // RA
            context.Bus = context.A;
            // WM
            context.Set(_memoryIndex, context.Bus);
        }
    }

    private void STC(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.Instruction.Data;
            // AW
            _memoryIndex = context.Bus;
        }
        // Step 3
        {
            // RC
            context.Bus = context.C;
            // WM
            context.Set(_memoryIndex, context.Bus);
        }
    }

    private void ADD(ref StepContext context)
    {
        // Step 2
        {
            // ADD
            context.Bus = context.A + context.B;
            context.FlagA = context.Bus == 0;

            if (context.Bus >= 65535)
            {
                context.Bus -= 65535;
                context.FlagB = true;
            }
            else
            {
                context.FlagB = false;
            }
            // WA
            context.A = context.Bus;
        }
    }

    private void SUB(ref StepContext context)
    {
        // Step 2
        {
            // SU
            context.Bus = A - B;
            context.FlagA = context.Bus == 0;

            if (context.Bus < 0)
            {
                context.Bus = 65535 + context.Bus;
                context.FlagB = false;
            }
            else
            {
                context.FlagB = true;
            }
            // WA
            context.A = context.Bus;
        }
    }

    private void MULT(ref StepContext context)
    {
        // Step 2
        {
            // MU
            context.Bus = context.A * context.B;
            context.FlagA = context.Bus == 0;

            if (context.Bus >= 65535)
            {
                context.Bus -= 65535;
                context.FlagB = true;
            }
            else
            {
                context.FlagB = false;
            }
            // WA
            context.A = context.Bus;
        }
    }

    private void DIV(ref StepContext context)
    {
        // Step 2
        {
            // DI
            if (context.B != 0)
            {
                context.Bus = context.A / context.B;
                context.FlagA = context.Bus == 0;
            }
            else
            {
                context.FlagA = false;
                context.Bus = 0;
            }

            if (context.Bus >= 65535)
            {
                context.Bus -= 65535;
                context.FlagB = true;
            }
            else
            {
                context.FlagB = false;
            }
            // WA
            context.A = context.Bus;
        }
    }

    private void JMP(ref StepContext context)
    {
        // Step 2
        {
            // IR
            context.Bus = context.Instruction.Data;
            // J
            _programCounter = context.Bus;
        }
    }

    private void JMPZ(ref StepContext context)
    {
        // Step 2
        if (context.FlagA == false && context.FlagB == false)
        {
            // EI
            return;
        }
        // Step 2
        if (context.FlagA == false && context.FlagB == true)
        {
            // EI
            return;
        }
        // Step 2
        if (context.FlagA == true && context.FlagB == false)
        {
            // IR
            context.Bus = context.Instruction.Data;
            // J
            _programCounter = context.Bus;
        }
        // Step 2
        if (context.FlagA == true && context.FlagB == true)
        {
            // IR
            context.Bus = context.Instruction.Data;
            // J
            _programCounter = context.Bus;
        }
    }

    private void JMPC(ref StepContext context)
    {
        // Step 2
        if (context.FlagA == false && context.FlagB == false)
        {
            // EI
            return;
        }
        // Step 2
        if (context.FlagA == false && context.FlagB == true)
        {
            // IR
            context.Bus = context.Instruction.Data;
            // J
            _programCounter = context.Bus;
        }
        // Step 2
        if (context.FlagA == true && context.FlagB == false)
        {
            // EI
            return;
        }
        // Step 2
        if (context.FlagA == true && context.FlagB == true)
        {
            // IR
            context.Bus = context.Instruction.Data;
            // J
            _programCounter = context.Bus;
        }
    }

    private void LDAIN(ref StepContext context)
    {
        // Step 2
        {
            // RA
            context.Bus = context.A;
            // AW
            _memoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(_memoryIndex);
            // WA
            context.A = context.Bus;
        }
    }

    private void STAOUT(ref StepContext context)
    {
        // Step 2
        {
            // RA
            context.Bus = context.A;
            // AW
            _memoryIndex = context.Bus;
        }
        // Step 3
        {
            // RB
            context.Bus = context.B;
            // WM
            context.Set(_memoryIndex, context.Bus);
        }
    }

    private void LDLGE(ref StepContext context)
    {
        // Step 2
        {
            // CR
            context.Bus = _programCounter;
            // AW
            _memoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(_memoryIndex);
            // AW
            _memoryIndex = context.Bus;
        }
        // Step 4
        {
            // RM
            context.Bus = context.Get(_memoryIndex);
            // WA
            context.A = context.Bus;
            // CE
            _programCounter += 1;
        }
    }

    private void STLGE(ref StepContext context)
    {
        // Step 2
        {
            // CR
            context.Bus = _programCounter;
            // AW
            _memoryIndex = context.Bus;
        }
        // Step 3
        {
            // RM
            context.Bus = context.Get(_memoryIndex);
            // AW
            _memoryIndex = context.Bus;
        }
        // Step 4
        {
            // RA
            context.Bus = context.A;
            // WM
            context.Set(_memoryIndex, context.Bus);
            // CE
            _programCounter += 1;
        }
    }

    private void SWP(ref StepContext context)
    {
        // Step 2
        {
            // RA
            context.Bus = context.A;
            // WC
            context.C = context.Bus;
        }
        // Step 3
        {
            // RB
            context.Bus = context.B;
            // WA
            context.A = context.Bus;
        }
        // Step 4
        {
            // RC
            context.Bus = context.C;
            // WB
            context.B = context.Bus;
        }
    }

    private void SWPC(ref StepContext context)
    {
        // Step 2
        {
            // RA
            context.Bus = context.A;
            // WB
            context.B = context.Bus;
        }
        // Step 3
        {
            // RC
            context.Bus = context.C;
            // WA
            context.A = context.Bus;
        }
        // Step 4
        {
            // RB
            context.Bus = context.B;
            // WC
            context.C = context.Bus;
        }
    }

    private void HLT(ref StepContext context)
    {
        // Step 2
        {
            // ST
            _halt = true;
        }
    }

    private void OUT(ref StepContext context)
    {
        // Step 2
        {
            // RA
            context.Bus = context.A;
        }
    }

}
