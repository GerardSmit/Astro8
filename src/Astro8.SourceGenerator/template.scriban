//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Runtime.CompilerServices;
using Astro8.Instructions;

namespace Astro8.Devices;

/// <summary>
/// Default instruction set for the Astro-8 CPU.
/// </summary>
public partial class Cpu<THandler>
{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private partial void Step(ref StepContext context)
    {
        switch (context.Instruction.Id)
        {
        {{- for instruction in Instructions }}
            case {{ instruction.Id }}:
                {{ instruction.Name }}(ref context);
                break;
        {{- end }}
        }
    }
{{ for instruction in Instructions }}
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private void {{ instruction.Name }}(ref StepContext context)
    {
    {{- for step in instruction.Steps }}
        // Step {{ step.Id }}{{ if step.HasFlags }}
        if (context.Cpu.FlagA == {{ step.FlagA }} && context.Cpu.FlagB == {{ step.FlagB }}){{ end }}
        {
        {{- if step.MicroInstruction.IsRA }}
            // RA
            context.Cpu.Bus = context.Cpu.A;
        {{- else if step.MicroInstruction.IsRB }}
            // RB
            context.Cpu.Bus = context.Cpu.B;
        {{- else if step.MicroInstruction.IsRC }}
            // RC
            context.Cpu.Bus = context.Cpu.C;
        {{- else if step.MicroInstruction.IsRM }}
            // RM
            context.Cpu.Bus = context.Get(context.Cpu.MemoryIndex);
        {{- else if step.MicroInstruction.IsIR }}
            // IR
            context.Cpu.Bus = context.Instruction.Data;
        {{- else if step.MicroInstruction.IsCR }}
            // CR
            context.Cpu.Bus = context.Cpu.ProgramCounter;
        {{- else if step.MicroInstruction.IsRE }}
            // RE
            context.Cpu.Bus = ExpansionPort;
        {{- end -}}

        {{-func checkOverflow}}
           if (context.Cpu.Bus == 0)
           {
               context.Cpu.FlagA = true;
           }
           else if (context.Cpu.Bus >= 65534)
           {
               context.Cpu.Bus -= 65534;
               context.Cpu.FlagB = true;
           }
        {{end-}}

        {{- if step.MicroInstruction.IsEO }}
            // EO
            context.Cpu.FlagA = false;
            context.Cpu.FlagB = false;
        {{ if step.MicroInstruction.IsSL }}
            context.Cpu.Bus = context.Cpu.A << (context.Cpu.B);

            {{ checkOverflow }}
        {{- else if step.MicroInstruction.IsSR }}
            context.Cpu.Bus = context.Cpu.A >> (context.Cpu.B);

            {{ checkOverflow }}
        {{- else if step.MicroInstruction.IsAND }}
            context.Cpu.Bus = context.Cpu.A & context.Cpu.B;

            {{ checkOverflow }}
        {{- else if step.MicroInstruction.IsOR }}
            context.Cpu.Bus = context.Cpu.A | context.Cpu.B;

            {{ checkOverflow }}
        {{- else if step.MicroInstruction.IsNOT }}
            context.Cpu.Bus = ~context.Cpu.A;

            {{ checkOverflow }}
        {{- else if step.MicroInstruction.IsSU }}
            // SU
            context.Cpu.Bus = context.Cpu.A - context.Cpu.B;
            context.Cpu.FlagA = context.Cpu.Bus == 0;

            if (context.Cpu.Bus < 0)
            {
                context.Cpu.Bus = 65534 + context.Cpu.Bus;
                context.Cpu.FlagB = false;
            }
            else
            {
                context.Cpu.FlagB = true;
            }
        {{- else if step.MicroInstruction.IsMU }}
            // MU
            context.Cpu.Bus = context.Cpu.A * context.Cpu.B;
            context.Cpu.FlagA = context.Cpu.Bus == 0;

            if (context.Cpu.Bus >= 65534)
            {
                context.Cpu.Bus -= 65534;
                context.Cpu.FlagB = true;
            }
            else
            {
                context.Cpu.FlagB = false;
            }
        {{- else if step.MicroInstruction.IsDI }}
            // DI
            if (context.Cpu.B != 0)
            {
                context.Cpu.Bus = context.Cpu.A / context.Cpu.B;
                context.Cpu.FlagA = context.Cpu.Bus == 0;
            }
            else
            {
                context.Cpu.FlagA = false;
                context.Cpu.Bus = 0;
            }

            if (context.Cpu.Bus >= 65534)
            {
                context.Cpu.Bus -= 65534;
                context.Cpu.FlagB = true;
            }
            else
            {
                context.Cpu.FlagB = false;
            }
        {{- else }}
            // ADD
            context.Cpu.Bus = context.Cpu.A + context.Cpu.B;
            context.Cpu.FlagA = context.Cpu.Bus == 0;

            if (context.Cpu.Bus >= 65534)
            {
                context.Cpu.Bus -= 65534;
                context.Cpu.FlagB = true;
            }
            else
            {
                context.Cpu.FlagB = false;
            }
        {{- end -}}
        {{- end -}}

        {{- if step.MicroInstruction.IsWA }}
            // WA
            context.Cpu.A = context.Cpu.Bus;
        {{- else if step.MicroInstruction.IsWB }}
            // WB
            context.Cpu.B = context.Cpu.Bus;
        {{- else if step.MicroInstruction.IsWC }}
            // WC
            context.Cpu.C = context.Cpu.Bus;
        {{- else if step.MicroInstruction.IsIW }}
            // IW
            _instructionReg = context.Cpu.Bus;
        {{- else if step.MicroInstruction.IsWM }}
            // WM
            context.Set(context.Cpu.MemoryIndex, context.Cpu.Bus);
        {{- else if step.MicroInstruction.IsJ }}
            // J
            context.Cpu.ProgramCounter = context.Cpu.Bus;
        {{- else if step.MicroInstruction.IsAW }}
            // AW
            context.Cpu.MemoryIndex = context.Cpu.Bus;
        {{- else if step.MicroInstruction.IsWE }}
            // WE
            ExpansionPort = context.Cpu.Bus;
        {{- else if step.MicroInstruction.IsBNK }}
            // BNK
            context.Cpu.Bank = context.Cpu.Bus;
        {{- end -}}

        {{- if step.MicroInstruction.IsCE }}
            // CE
            context.Cpu.ProgramCounter += 1;
        {{- else if step.MicroInstruction.IsST }}
            // ST
            _halt = true;
        {{- end -}}

        {{- if step.MicroInstruction.IsEI }}
            // EI
            return;
        {{- end }}
        }
    {{- end }}
    }
{{ end }}
}
