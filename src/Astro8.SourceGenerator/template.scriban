//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Astro8.Instructions;

namespace Astro8.Devices;

/// <summary>
/// Default instruction set for the Astro-8 CPU.
/// </summary>
public partial class Cpu<THandler>
{
    private void Step(ref StepContext context)
    {
        switch (context.Instruction.Id)
        {
        {{ for instruction in Instructions }}
            case {{ instruction.Id }}:
                {{ instruction.Name }}(ref context);
                break;
        {{ end }}
        }
    }
{{ for instruction in Instructions }}
    private void {{ instruction.Name }}(ref StepContext context)
    {
    {{- for step in instruction.Steps }}
        // Step {{ step.Id }}{{ if step.HasFlags }}
        if (context.FlagA == {{ step.FlagA }} && context.FlagB == {{ step.FlagB }}){{ end }}
        {
        {{- if step.MicroInstruction.IsRA }}
            // RA
            context.Bus = context.A;
        {{- else if step.MicroInstruction.IsRB }}
            // RB
            context.Bus = context.B;
        {{- else if step.MicroInstruction.IsRC }}
            // RC
            context.Bus = context.C;
        {{- else if step.MicroInstruction.IsRM }}
            // RM
            context.Bus = context.Get(_memoryIndex);
        {{- else if step.MicroInstruction.IsIR }}
            // IR
            context.Bus = context.Instruction.Data;
        {{- else if step.MicroInstruction.IsCR }}
            // CR
            context.Bus = _programCounter;
        {{- else if step.MicroInstruction.IsRE }}
            // RE
            context.Bus = ExpansionPort;
        {{- end -}}

        {{- if step.MicroInstruction.IsEO }}
        {{- if step.MicroInstruction.IsSU }}
            // SU
            context.Bus = context.A - context.B;
            context.FlagA = context.Bus == 0;

            if (context.Bus < 0)
            {
                context.Bus = 65535 + context.Bus;
                context.FlagB = false;
            }
            else
            {
                context.FlagB = true;
            }
        {{- else if step.MicroInstruction.IsMU }}
            // MU
            context.Bus = context.A * context.B;
            context.FlagA = context.Bus == 0;

            if (context.Bus >= 65535)
            {
                context.Bus -= 65535;
                context.FlagB = true;
            }
            else
            {
                context.FlagB = false;
            }
        {{- else if step.MicroInstruction.IsDI }}
            // DI
            if (context.B != 0)
            {
                context.Bus = context.A / context.B;
                context.FlagA = context.Bus == 0;
            }
            else
            {
                context.FlagA = false;
                context.Bus = 0;
            }

            if (context.Bus >= 65535)
            {
                context.Bus -= 65535;
                context.FlagB = true;
            }
            else
            {
                context.FlagB = false;
            }
        {{- else }}
            // ADD
            context.Bus = context.A + context.B;
            context.FlagA = context.Bus == 0;

            if (context.Bus >= 65535)
            {
                context.Bus -= 65535;
                context.FlagB = true;
            }
            else
            {
                context.FlagB = false;
            }
        {{- end -}}
        {{- end -}}

        {{- if step.MicroInstruction.IsWA }}
            // WA
            context.A = context.Bus;
        {{- else if step.MicroInstruction.IsWB }}
            // WB
            context.B = context.Bus;
        {{- else if step.MicroInstruction.IsWC }}
            // WC
            context.C = context.Bus;
        {{- else if step.MicroInstruction.IsIW }}
            // IW
            _instructionReg = context.Bus;
        {{- else if step.MicroInstruction.IsWM }}
            // WM
            context.Set(_memoryIndex, context.Bus);
        {{- else if step.MicroInstruction.IsJ }}
            // J
            _programCounter = context.Bus;
        {{- else if step.MicroInstruction.IsAW }}
            // AW
            _memoryIndex = context.Bus;
        {{- else if step.MicroInstruction.IsWE }}
            // WE
            ExpansionPort = context.Bus;
        {{- end -}}

        {{- if step.MicroInstruction.IsCE }}
            // CE
            _programCounter += 1;
        {{- else if step.MicroInstruction.IsST }}
            // ST
            _halt = true;
        {{- end -}}

        {{- if step.MicroInstruction.IsEI }}
            // EI
            return;
        {{- end }}
        }
    {{- end }}
    }
{{ end }}
}
