//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Astro8.Instructions;

namespace Astro8.Devices;

/// <summary>
/// Default instruction set for the Astro-8 CPU.
/// </summary>
public partial class Cpu<THandler>
{
    private void Step(StepContext context)
    {
        switch (context.Instruction.Id)
        {
        {{ for instruction in Instructions }}
            case {{ instruction.Id }}:
                {{ instruction.Name }}(context);
                break;
        {{ end }}
        }
    }
{{ for instruction in Instructions }}
    private void {{ instruction.Name }}(StepContext context)
    {
    {{- for step in instruction.Steps }}
        // Step {{ step.Id }}{{ if step.HasFlags }}
        if (_flagA == {{ step.FlagA }} && _flagB == {{ step.FlagB }}){{ end }}
        {
        {{- if step.MicroInstruction.IsRA }}
            // RA
            _bus = A;
        {{- else if step.MicroInstruction.IsRB }}
            // RB
            _bus = B;
        {{- else if step.MicroInstruction.IsRC }}
            // RC
            _bus = C;
        {{- else if step.MicroInstruction.IsRM }}
            // RM
            _bus = context.Memory[_memoryIndex];
        {{- else if step.MicroInstruction.IsIR }}
            // IR
            _bus = context.Instruction.Data;
        {{- else if step.MicroInstruction.IsCR }}
            // CR
            _bus = _programCounter;
        {{- else if step.MicroInstruction.IsRE }}
            // RE
            _bus = ExpansionPort;
        {{- end -}}

        {{- if step.MicroInstruction.IsEO }}
        {{- if step.MicroInstruction.IsSU }}
            // SU
            _bus = A - B;
            _flagA = _bus == 0;

            if (_bus < 0)
            {
                _bus = 65535 + _bus;
                _flagB = false;
            }
            else
            {
                _flagB = true;
            }
        {{- else if step.MicroInstruction.IsMU }}
            // MU
            _bus = A * B;
            _flagA = _bus == 0;

            if (_bus >= 65535)
            {
                _bus -= 65535;
                _flagB = true;
            }
            else
            {
                _flagB = false;
            }
        {{- else if step.MicroInstruction.IsDI }}
            // DI
            if (B != 0)
            {
                if (A / B == 0)
                {
                    _flagA = true;
                }

                _bus = A / B;
                _flagA = _bus == 0;
            }
            else
            {
                _flagA = false;
                _bus = 0;
            }

            if (_bus >= 65535)
            {
                _bus -= 65535;
                _flagB = true;
            }
            else
            {
                _flagB = false;
            }
        {{- else }}
            // ADD
            _bus = A + B;
            _flagA = _bus == 0;

            if (_bus >= 65535)
            {
                _bus -= 65535;
                _flagB = true;
            }
            else
            {
                _flagB = false;
            }
        {{- end -}}
        {{- end -}}

        {{- if step.MicroInstruction.IsWA }}
            // WA
            A = _bus;
        {{- else if step.MicroInstruction.IsWB }}
            // WB
            B = _bus;
        {{- else if step.MicroInstruction.IsWC }}
            // WC
            C = _bus;
        {{- else if step.MicroInstruction.IsIW }}
            // IW
            _instructionReg = _bus;
        {{- else if step.MicroInstruction.IsWM }}
            // WM
            context.Set(_memoryIndex, _bus);
        {{- else if step.MicroInstruction.IsJ }}
            // J
            _programCounter = _bus;
        {{- else if step.MicroInstruction.IsAW }}
            // AW
            _memoryIndex = _bus;
        {{- else if step.MicroInstruction.IsWE }}
            // WE
            ExpansionPort = _bus;
        {{- end -}}

        {{- if step.MicroInstruction.IsCE }}
            // CE
            _programCounter += 1;
        {{- else if step.MicroInstruction.IsST }}
            // ST
            _halt = true;
        {{- end -}}

        {{- if step.MicroInstruction.IsEI }}
            // EI
            return;
        {{- end }}
        }
    {{- end }}
    }
{{ end }}
}
