@inject IJSRuntime Runtime
@implements IDisposable

<div class="m-2 d-flex align-items-center flex-column">
    <canvas id="emulator" class="emulator-screen" width="108" height="108"></canvas>

    @if (ShowRegisters)
    {
        <div class="mt-2 flex-fill w-100">
            <div class="row g-0">
                <div class="col">
                    <RegisterValue Name="A" Value="_a"/>
                </div>
                <div class="col">
                    <RegisterValue Name="B" Value="_b"/>
                </div>
                <div class="col">
                    <RegisterValue Name="C" Value="_c"/>
                </div>
            </div>
        </div>
    }
</div>

@code {

    private int _a;
    private int _b;
    private int _c;
    private int[] _expansionPort = Array.Empty<int>();
    private int _counter;
    private int _bank;
    private DotNetObjectReference<Emulator>? _objRef;

    [Parameter]
    public bool ShowRegisters { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await Runtime.InvokeVoidAsync("emulator.init", "emulator", _objRef);
        }
    }

    public async Task ExecuteAsync(Stream stream)
    {
        using var streamRef = new DotNetStreamReference(stream: stream, leaveOpen: false);

        await Runtime.InvokeVoidAsync("emulator.execute", streamRef);
    }

    public async Task EnableInput(bool value)
    {
        await Runtime.InvokeVoidAsync("emulator.enableInput", value);
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }

    [JSInvokable]
    public Task UpdateValue(int a, int b, int c, int counter, int bank, int[] expansionPort)
    {
        _a = a;
        _b = b;
        _c = c;
        _expansionPort = expansionPort;
        _counter = counter;
        _bank = bank;

        if (ShowRegisters)
        {
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

}
