@implements IDisposable
@using Astro8.Instructions

<div class="row g-0">
    <div class="col h-100 d-grid overflow-hidden flex-shrink-1">
        <MonacoEditor @ref="_editor"
                      Id="editor"
                      ConstructionOptions="EditorConstructionOptions"
                      OnDidInit="EditorOnDidInit"
                      OnDidFocusEditorText="EditorOnFocus"
                      OnDidBlurEditorText="EditorOnBlur"/>
    </div>
    <div class="col-auto asm-code font-monospace h-100 overflow-scroll">
        @_assembly
    </div>
    <div class="col-auto d-flex align-items-center justify-content-center flex-shrink-0" tabindex="1">
        <Emulator @ref="_emulator" ShowRegisters="true" />
    </div>
</div>

@code {

    private Emulator _emulator = null!;
    private MonacoEditor _editor = null!;
    private MarkupString _assembly = new();

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "c"
        };
    }

    private void EditorOnDidInit()
    {
        _editor.AddCommand((int)KeyCode.F5, (_, _) =>
        {
            Task.Run(async () =>
            {
                try
                {
                    var builder = new YabalBuilder();
                    await builder.CompileCodeAsync(await _editor.GetValue());

                    foreach (var error in builder.Errors.SelectMany(i => i.Value))
                    {
                        Console.WriteLine($"{error.Range.StartLine}:{error.Range.StartColumn} {error.Message}");
                    }

                    var result = builder.Build();

                    using (var memory = new MemoryStream())
                    {
                        await using var writer = new StreamWriter(memory);
                        result.ToLogisimFile(writer);
                        await writer.FlushAsync();

                        memory.Position = 0;
                        await _emulator.ExecuteAsync(memory);
                    }

                    _assembly = new MarkupString(result.ToAssembly(addComments: true, htmlHighlight: true));
                    await InvokeAsync(StateHasChanged);
                } catch (Exception e) {
                    Console.WriteLine(e);
                }
            });
        });
    }

    private Task EditorOnFocus()
    {
        return _emulator.EnableInput(false);
    }

    private Task EditorOnBlur()
    {
        return _emulator.EnableInput(true);
    }

    public void Dispose()
    {
        _editor.Dispose();
    }

}
